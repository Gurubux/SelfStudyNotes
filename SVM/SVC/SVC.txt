------------------------------------------------------------------------------------------------------------------------------------------------------
****************************************************EVALUATION METRICS SVC****************************************************




------------------------------------------------------------------------------------------------------------------------------------------------------
****************************************************EVALUATION METRICS SVC****************************************************




------------------------------------------------------------------------------------------------------------------------------------------------------
****************************************************EVALUATION METRICS SVC****************************************************





------------------------------------------------------------------------------------------------------------------------------------------------------
****************************************************EVALUATION METRICS SVC****************************************************




------------------------------------------------------------------------------------------------------------------------------------------------------
****************************************************REFERENCES SVC****************************************************
"https://towardsdatascience.com/support-vector-machine-vs-logistic-regression-94cc2975433f"

m4,n4 = Xval.shape[0],Xval.shape[1]
pos4,neg4= (yval==1).reshape(m4,1), (yval==0).reshape(m4,1)

plt.figure(figsize=(8,6))
plt.scatter(Xval[pos4[:,0],0],Xval[pos4[:,0],1],c="r",marker="+",s=50)
plt.scatter(Xval[neg4[:,0],0],Xval[neg4[:,0],1],c="y",marker="o",s=50)

# plotting the decision boundary
X_9,X_10 = np.meshgrid(np.linspace(Xval[:,0].min(),Xval[:,1].max(),num=100),np.linspace(Xval[:,1].min(),Xval[:,1].max(),num=100))
plt.contour(X_9,X_10,classifier4.predict(np.array([X_9.ravel(),X_10.ravel()]).T).reshape(X_9.shape),1,colors="b")
plt.xlim(-0.6,0.3)
plt.ylim(-0.7,0.5)
'linear', 'poly', 'rbf', 'sigmoid', 'precomputed'